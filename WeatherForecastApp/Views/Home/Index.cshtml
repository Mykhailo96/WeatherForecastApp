@model WeatherForecastApp.Models.Forecast
@{
    ViewBag.Title = "Weather Forecast";
}

<div>
    <p id="piopio">@Model.City.Name</p>
</div>

<div>

    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#today" aria-controls="today" role="tab" data-toggle="tab">Today</a></li>
        <li role="presentation"><a href="#three" aria-controls="three" role="tab" data-toggle="tab">3 days</a></li>
        <li role="presentation"><a href="#five" aria-controls="five" role="tab" data-toggle="tab">5 days</a></li>
    </ul>

    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="today">

            @{
                int i = 0;
                var w = Model.List[i];


                while (w.Dt_txt.Contains(DateTime.Now.ToString("yyyy-MM-dd")))
                {
                    @DayOrNight(w);
                    w = Model.List[++i];
                }

            }
        </div>

        <div role="tabpanel" class="tab-pane" id="three">
            @{
                i = 0;
                var f3 = Model.List[i];
                while (!f3.Dt_txt.Contains(DateTime.Now.AddDays(3).ToString("yyyy-MM-dd")) && i < Model.List.Count - 2)
                {
                    @DayOrNight(f3);
                    f3 = Model.List[++i];
                }
            }
        </div>

        <div role="tabpanel" class="tab-pane" id="five">
            @{
                foreach (var f5 in Model.List)
                {
                    @DayOrNight(f5);
                }
            }
        </div>
    </div>

</div>

@functions
{
    public IHtmlString DayOrNight(WeatherForecastApp.Models.List forecast)
    {
        if (forecast.Dt_txt.Contains("00:00:00") || forecast.Dt_txt.Contains("03:00:00"))
        {
            return Html.Raw("<br><div class='container'><i class='owf owf-" + forecast.Weather[0].Id + "-n owf-4x owf-pull-left owf-border'></i><strong>" +
                forecast.Dt_txt.Remove(0,11).Remove(5, 3) + "</strong><br>Temp " + Math.Round(forecast.Main.Temp) +
                "°C<br>Humidity " + forecast.Main.Humidity +
                "%<br>Pressure " + Math.Round(forecast.Main.Pressure) + " Bar" +
                "<br>Wind " + DegreesToCardinal(forecast.Wind.Deg) + " " + forecast.Wind.Speed + " m/s " +
                "</div>");
        }
        else
        {
            return Html.Raw("<br><div class='container'><i class='owf owf-" + forecast.Weather[0].Id + "-d owf-4x owf-pull-left owf-border'></i><strong>" +
                forecast.Dt_txt.Remove(0, 11).Remove(5, 3) + "</strong><br>Temp " + Math.Round(forecast.Main.Temp) +
                "°C<br>Humidity " + forecast.Main.Humidity +
                "%<br>Pressure " + Math.Round(forecast.Main.Pressure) + " Bar" +
                "<br>Wind " + DegreesToCardinal(forecast.Wind.Deg) + " " + forecast.Wind.Speed + " m/s " +
                "</div>");
        }
    }

    public static string DegreesToCardinal(double degrees)
    {
        string[] caridnals = { "N", "NE", "E", "SE", "S", "SW", "W", "NW", "N" };
        return caridnals[(int)Math.Round(((double)degrees % 360) / 45)];
    }
}